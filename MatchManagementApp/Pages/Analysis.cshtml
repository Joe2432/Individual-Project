@page "{id:int}"
@model MatchManagementApp.UI.Pages.AnalysisModel
@using System.Text.Json
@{
    ViewData["Title"] = "Match Analysis";
    var vm = Model.ViewModel;
}

@section Styles {
    <link rel="stylesheet" href="~/css/analysis-page.css" />
    <style>
        .card canvas {
            width: 100% !important;
            height: 300px !important;
        }
    </style>
}

<div class="container mt-4">
    <!-- Match Info -->
    <div class="mb-4">
        <h4>Match Date: @vm.MatchDate?.ToString("dd MMM yyyy")</h4>
        <p class="mb-1 fw-bold">Score by Set:</p>
        <ul class="list-group list-group-horizontal">
            @foreach (var score in vm.PlayerAGameByGame)
            {
                <li class="list-group-item">@score</li>
            }
        </ul>
    </div>

    <!-- Statistics Cards -->
    <div class="row g-4 mb-6">
        <!-- Player A -->
        <div class="col-12 col-lg-6">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-primary text-white">You</div>
                <div class="card-body">
                    <p><strong>Aces:</strong> @vm.AcesPlayerA</p>
                    <p><strong>Double Faults:</strong> @vm.DoubleFaultsPlayerA</p>
                    <p><strong>1st Serve %:</strong> @vm.FirstServePctA %</p>
                    <p><strong>Win % 1st Serve:</strong> @vm.WinPctOnFirstServeA %</p>
                    <p><strong>Win % 2nd Serve:</strong> @vm.WinPctOnSecondServeA %</p>
                    <p><strong>Breaks:</strong> @vm.BreakPointsWonA/@vm.BreakPointsOpportunitiesA</p>
                    <p><strong>Tiebreaks Won:</strong> @vm.TiebreaksWonA</p>
                    <p><strong>Rec. Points Won:</strong> @vm.ReceivingPointsWonA</p>
                    <p><strong>Points Won:</strong> @vm.PointsWonA</p>
                    <p><strong>Games Won:</strong> @vm.GamesWonA</p>
                    <p><strong>Max Games Streak:</strong> @vm.MaxGamesInARowA</p>
                    <p><strong>Max Points Streak:</strong> @vm.MaxPointsInARowA</p>
                    <p><strong>Service Games Won:</strong> @vm.ServiceGamesWonA</p>
                </div>
            </div>
        </div>
        <!-- Player B -->
        <div class="col-12 col-lg-6">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-danger text-white text-end">@vm.PlayerBName</div>
                <div class="card-body text-end">
                    <p><strong>Aces:</strong> @vm.AcesPlayerB</p>
                    <p><strong>Double Faults:</strong> @vm.DoubleFaultsPlayerB</p>
                    <p><strong>1st Serve %:</strong> @vm.FirstServePctB %</p>
                    <p><strong>Win % 1st Serve:</strong> @vm.WinPctOnFirstServeB %</p>
                    <p><strong>Win % 2nd Serve:</strong> @vm.WinPctOnSecondServeB %</p>
                    <p><strong>Breaks:</strong> @vm.BreakPointsWonB/@vm.BreakPointsOpportunitiesB</p>
                    <p><strong>Tiebreaks Won:</strong> @vm.TiebreaksWonB</p>
                    <p><strong>Rec. Points Won:</strong> @vm.ReceivingPointsWonB</p>
                    <p><strong>Points Won:</strong> @vm.PointsWonB</p>
                    <p><strong>Games Won:</strong> @vm.GamesWonB</p>
                    <p><strong>Max Games Streak:</strong> @vm.MaxGamesInARowB</p>
                    <p><strong>Max Points Streak:</strong> @vm.MaxPointsInARowB</p>
                    <p><strong>Service Games Won:</strong> @vm.ServiceGamesWonB</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Chart Grid -->
    <div class="grid grid-cols-2 gap-6 mb-6">
        <div class="card p-4 shadow rounded-2xl">
            <h2 class="text-xl font-semibold mb-2">Serve Outcomes</h2>
            <canvas id="servePie"></canvas>
        </div>

        <div class="card p-4 shadow rounded-2xl">
            <h2 class="text-xl font-semibold mb-2">Serve Win %</h2>
            <canvas id="serveWinPie"></canvas>
        </div>

        <div class="card p-4 shadow rounded-2xl col-span-2">
            <h2 class="text-xl font-semibold mb-2">Stats Comparison (You vs Opponent)</h2>
            <canvas id="statsComparison"></canvas>
        </div>

        @for (int i = 0; i < vm.PlayerAGameProgressions.Count; i++)
        {
            <div class="card p-4 shadow rounded-2xl col-span-2">
                <h2 class="text-xl font-semibold mb-2">Score Progression — Set @(i + 1)</h2>
                <canvas id="scoreFlow@(i)"></canvas>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // helper to instantiate a chart
            function createChart(id, config) {
                const canvas = document.getElementById(id);
                if (!canvas) 
                {
                    console.warn(`canvas #${id} not found`);
                    return;
                }
                const ctx = canvas.getContext('2d');
                new Chart(ctx, config);
            }

            // Pie: Serve Outcomes
            createChart('servePie', {
                type: 'pie',
                data: {
                    labels: ['Aces (You)', 'Aces (Opp)', 'DF (You)', 'DF (Opp)'],
                    datasets: [{
                        data: [@vm.AcesPlayerA, @vm.AcesPlayerB, @vm.DoubleFaultsPlayerA, @vm.DoubleFaultsPlayerB]
                    }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });

            // Pie: Serve Win %
            createChart('serveWinPie', {
                type: 'pie',
                data: {
                    labels: ['1st Win% (You)', '1st Win% (Opp)'],
                    datasets: [{
                        data: [@vm.WinPctOnFirstServeA, @vm.WinPctOnFirstServeB]
                    }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });

            // Bar: Stats Comparison
            createChart('statsComparison', {
                type: 'bar',
                data: {
                    labels: ['Points Won','Games Won','Breaks Won','Tiebreaks','Max Games Streak','Max Points Streak'],
                    datasets: [
                        {
                            label: 'You',
                            data: [@vm.PointsWonA, @vm.GamesWonA, @vm.BreakPointsWonA, @vm.TiebreaksWonA, @vm.MaxGamesInARowA, @vm.MaxPointsInARowA]
                        },
                        {
                            label: 'Opp',
                            data: [@vm.PointsWonB, @vm.GamesWonB, @vm.BreakPointsWonB, @vm.TiebreaksWonB, @vm.MaxGamesInARowB, @vm.MaxPointsInARowB]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: { y: { beginAtZero: true } }
                }
            });

            // Deserialize per-set progressions
            const progA = @Html.Raw(JsonSerializer.Serialize(vm.PlayerAGameProgressions));
            const progB = @Html.Raw(JsonSerializer.Serialize(vm.PlayerBGameProgressions));

            // Line: cumulative games won per set
            progA.forEach((setA, idx) => {
                const canvas = document.getElementById(`scoreFlow${idx}`);
                if (!canvas)
                {
                    return console.warn(`canvas #scoreFlow${idx} not found`);
                }
                const ctx = canvas.getContext('2d');

                new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [
                            {
                                label: `You – Set ${idx + 1}`,
                                data: setA.map((wins, g) => ({ x: g + 1, y: wins })),
                                borderColor: '#3b82f6',
                                borderWidth: 2,
                                fill: false,
                                tension: 0
                            },
                            {
                                label: `Opp – Set ${idx + 1}`,
                                data: (progB[idx] || []).map((wins, g) => ({ x: g + 1, y: wins })),
                                borderColor: '#ef4444',
                                borderWidth: 2,
                                fill: false,
                                tension: 0
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                title: { display: true, text: 'Game Number' },
                                beginAtZero: true,
                                ticks: { stepSize: 1 }
                            },
                            y: {
                                title: { display: true, text: 'Cumulative Games Won' },
                                beginAtZero: true,
                                ticks: { stepSize: 1 }
                            }
                        },
                        plugins: { legend: { position: 'top' } }
                    }
                });
            });
        });
    </script>
}
